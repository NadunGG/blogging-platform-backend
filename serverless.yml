service: blogging-platform-backend

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    SERVICE: ${self:service}
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    NO_COLOR: ${env:NO_COLOR, 'true'}
    IS_DDB_LOCAL: ${env:IS_DDB_LOCAL, 'false'}
    BUCKET_NAME: ${self:service}-${self:provider.stage}-profile-avatar
  apiGateway:
    shouldStartNameWithService: true  
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
            - s3:PutBucketPolicy
          Resource: 
            - arn:aws:dynamodb:${self:provider.region}:*:*
            - arn:aws:s3:::${self:provider.environment.BUCKET_NAME}/*

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: false

functions:
  index-function:
    handler: src/index.handler
    events:
      - http:
          cors: true
          path: '{proxy+}'
          method: any

resources:
  - ${file(resource/dynamodb.yml)}
  - Resources:
      S3Bucket:
        Type: AWS::S3::Bucket
        Properties:
          BucketName: ${self:provider.environment.BUCKET_NAME}
      S3BucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
          Bucket: ${self:provider.environment.BUCKET_NAME}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Principal: "*"
                Action:
                  - "s3:GetObject"
                Resource: arn:aws:s3:::${self:provider.environment.BUCKET_NAME}/*